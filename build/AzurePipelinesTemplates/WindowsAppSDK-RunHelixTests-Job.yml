parameters:
  jobName: 'RunTestsInHelix'
  dependsOn: ''
  condition: ''
  maxParallel: 10
  matrix:
    Release_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'Release'
    Release_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'Release'

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  pool:
    vmImage: 'windows-2022'
  timeoutInMinutes: 80
  strategy:
    maxParallel: ${{ parameters.maxParallel }}
    matrix: ${{ parameters.matrix }}
  variables:
    # This version number should be kept in sync with the value in these files:
    #   build\Helix\packages.config
    #   test\WindowsAppSDK.Helix.TestCommon\WindowsAppSDK.Helix.TestCommon.csproj
    winUIHelixVer: 0.5.4
    winUIHelixPipelineScripts: build\Helix\packages\Microsoft.Internal.WinUI.Helix.$(winUIHelixVer)\scripts\pipeline

    # The target queues to run the tests on.
    # Note: %3b is the escape sequence for ';' which is used as the delimiter
    helixTargetQueuesOpen: 'Windows.10.Amd64.ClientRS5.Open.reunion%3bWindows.10.Amd64.Client20h2.Open.reunion%3bWindows.10.Amd64.Client.Open.reunion%3bwindows.11.amd64.client.open.reunion'
    helixTargetQueuesClosed: 'windows.10.amd64.client20h2.reunion%3bwindows.10.amd64.clientrs5.reunion%3bWindows.10.Amd64.Client.reunion%3bWindows.11.Amd64.client.Reunion'

    # When a test fails, it is re-run 10 times. This variable specifies how many times out of 10 it is required to pass
    rerunPassesRequiredToAvoidFailure: 8

    # This must be unique for each test pass that is run in a given Pipeline execution.
    helixType: devtest.$(buildPlatform).$(buildConfiguration)

    helixTestOutputBaseDir: $(Build.SourcesDirectory)\HelixTestOutput
    helixTestOutputDir: $(helixTestOutputBaseDir)\$(buildConfiguration)\$(buildPlatform)

    # This directory contains the Test payload, Helix test binaries and scripts. It is sent to the Helix machines.
    # Note: TAEF must be present in this directory, as GenerateHelixWorkItems.ps1 expects to invoke te.exe from here.
    # We download the BuildOutput artifact from the prior build stage(s) under this path.
    # However, the artifacts also has it's down folder structure, which makes the resulting directory structure look like this:
    #   $(Build.SourcesDirectory)\BuildOutput\$(buildConfiguration)\$(buildPlatform)\HelixTests\BuildOutput\$(buildConfiguration)\$(buildPlatform)
    testPayloadDir: $(Build.SourcesDirectory)\BuildOutput\$(buildConfiguration)\$(buildPlatform)\HelixTests

    # The generated .proj files are placed here.
    helixWorkItemsDir: $(Build.SourcesDirectory)\build\Helix\GeneratedWorkItems

    # Shared arguments for both open and closed Helix queues.
    helixCommonArgs: '/p:HelixBuild=$(Build.BuildId).$(buildPlatform).$(buildConfiguration) /p:Platform=$(buildPlatform) /p:Configuration=$(buildConfiguration) /p:TestPayloadDir=$(testPayloadDir) /p:HelixType=$(helixType) /p:rerunPassesRequiredToAvoidFailure=$(rerunPassesRequiredToAvoidFailure)'

  steps:
  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'

  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@1

  - task: powershell@2
    displayName: 'Create test pfx to sign MSIX test packages (DevCheck)'
    inputs:
      targetType: filePath
      filePath: DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -CertPassword 'BuildPipeline' -CheckTestPfx -Clean
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    displayName: 'Install test certificate for MSIX test packages (DevCheck)'
    inputs:
      targetType: filePath
      filePath: DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -CheckTestCert
      workingDirectory: '$(Build.SourcesDirectory)'

  - template: WindowsAppSDK-BuildSolution-Steps.yml
    parameters:
      displayName: WindowsAppSDK.Helix.Test
      solutionPath: test\WindowsAppSDK.Helix.Test\WindowsAppSDK.Helix.Test.sln
  
  # Note: 'NuGetCommand@2' is ambiguous so the specific task GUID must be used instead.
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      command: 'restore'
      restoreSolution: build/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  # Download the BuildOutput from the Build stage(s).
  # We only bring down the relevant content for this build config (Debug/Release) & platform, to save some space and time.
  - task: DownloadBuildArtifacts@0
    displayName: 'Download: BuildOutput'
    inputs:
      artifactName: 'BuildOutput'
      downloadPath: $(testPayloadDir)
      itemPattern: 'BuildOutput/$(buildConfiguration)/$(buildPlatform)/**/*'

  # Discover the TAEF test binaries to run and generate the Helix Work Items for them.
  # Note: There are 4 test suites for MRT Core. We currently run 3 of them in Helix.
  - task: powershell@2
    displayName: 'Discover MRT Core UnitTests'
    inputs:
      targetType: filePath
      filePath: $(winUIHelixPipelineScripts)\GenerateHelixWorkItems.ps1
      arguments: -TestFilePattern 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrmUnitTest\*.dll' -TestBinaryDirectoryPath '$(testPayloadDir)' -OutputProjFile '$(helixWorkItemsDir)\MrtCore-MrmUnitTests.proj' -WorkItemPrefix 'MrtCore.MrmUnitTests.$(buildPlatform).$(buildConfiguration)' -TestNamePrefix 'MrtCore.MrmUnitTests.$(buildPlatform).$(buildConfiguration)'

  - task: powershell@2
    displayName: 'Discover MRT Core BaseUnitTests'
    inputs:
      targetType: filePath
      filePath: $(winUIHelixPipelineScripts)\GenerateHelixWorkItems.ps1
      arguments: -TestFilePattern 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrmBaseUnitTests\*.dll' -TestBinaryDirectoryPath '$(testPayloadDir)' -OutputProjFile '$(helixWorkItemsDir)\MrtCore-MrmBaseUnitTests.proj' -WorkItemPrefix 'MrtCore.MrmBaseUnitTests.$(buildPlatform).$(buildConfiguration)' -TestNamePrefix 'MrtCore.MrmBaseUnitTests.$(buildPlatform).$(buildConfiguration)'

  - task: powershell@2
    displayName: 'Discover MRT Core UnpackagedTests'
    inputs:
      targetType: filePath
      filePath: $(winUIHelixPipelineScripts)\GenerateHelixWorkItems.ps1
      arguments: -TestFilePattern 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrtCoreUnpackagedTests\*.dll' -TestBinaryDirectoryPath '$(testPayloadDir)' -OutputProjFile '$(helixWorkItemsDir)\MrtCore-MrtCoreUnpackagedTests.proj' -WorkItemPrefix 'MrtCore.MrtCoreUnpackagedTests.$(buildPlatform).$(buildConfiguration)' -TestNamePrefix 'MrtCore.MrtCoreUnpackagedTests.$(buildPlatform).$(buildConfiguration)'

  # In Helix, test folders are under subfolders of TAEF. MRTCore UnpackagedTests use reg-free WinRT activation. It requires the winmd file
  # under same folder as the executable.
  - task: CopyFiles@2
    displayName: 'Copy Microsoft.Windows.ApplicationModel.Resources.winmd to test root'
    inputs:
      sourceFolder: $(testPayloadDir)\BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrtCoreUnpackagedTests
      contents: |
        Microsoft.Windows.ApplicationModel.Resources.winmd
      targetFolder: $(testPayloadDir)

  # TODO: This test needs to be converted to TAEF to run in Helix.
  # - task: powershell@2
  #   displayName: 'Discover MRT Core Managed tests'
  #   inputs:
  #     targetType: filePath
  #     filePath: $(winUIHelixPipelineScripts)\GenerateHelixWorkItems.ps1
  #     arguments: -TestFilePattern 'mrtcore_test_binaries_x64\MrtCoreManagedTest\*.dll' -TestBinaryDirectoryPath '$(testPayloadDir)' -OutputProjFile '$(helixWorkItemsDir)\MrtCore-MrtCoreManagedTest.proj' -WorkItemPrefix 'MrtCore-MrtCoreManagedTest-$(buildPlatform)-$(buildConfiguration)' -TestNamePrefix 'MrtCore.MrtCoreManagedTest.$(buildPlatform).$(buildConfiguration)'

  # Publish the generated test work items (*.proj file) as Pipeline artifact(s).
  # This is not required, but it is useful for debugging purposes to see what tests were discovered.
  - task: PublishBuildArtifacts@1
    displayName: 'Publish generated test work items'
    inputs:
      PathtoPublish: $(helixWorkItemsDir)
      artifactName: HelixWorkItems_$(buildPlatform)_$(buildConfiguration)
  
  - task: NuGetToolInstaller@1

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore Helix/RunTestsInHelix.proj'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      restoreSolution: build\Helix\RunTestsInHelix.proj
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  # Run the tests in Helix
  # By executing 'dotnet msbuild' against RunTestsInHelix.proj the test payload and the work items to execute get sent to Helix.
  - task: DotNetCoreCLI@2
    displayName: 'Run tests in Helix (open queues)'
    condition: and(succeeded(), eq(variables['System.CollectionUri'],'https://dev.azure.com/ms/'))
    timeoutInMinutes: 45
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      command: custom
      projects: build\Helix\RunTestsInHelix.proj
      custom: msbuild
      arguments: '$(helixCommonArgs) /p:IsExternal=true /p:Creator=WindowsAppSDK /p:HelixTargetQueues=$(helixTargetQueuesOpen)'

  - task: DotNetCoreCLI@2
    displayName: 'Run tests in Helix (closed queues)'
    condition: and(succeeded(), ne(variables['System.CollectionUri'],'https://dev.azure.com/ms/'))
    timeoutInMinutes: 45
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      command: custom
      projects: build\Helix\RunTestsInHelix.proj
      custom: msbuild
      arguments: '$(helixCommonArgs) /p:HelixTargetQueues=$(helixTargetQueuesClosed)'

  # This script updates the test results based on the retry logic. It updates the test results in the Pipeline to show 'sub results' in cases where a test was re-run.
  - task: powershell@2
    displayName: 'UpdateUnreliableTests.ps1'
    condition: succeededOrFailed()
    timeoutInMinutes: 15
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      targetType: filePath
      filePath: $(winUIHelixPipelineScripts)\UpdateUnreliableTests.ps1
      arguments: -RerunPassesRequiredToAvoidFailure $(rerunPassesRequiredToAvoidFailure) -HelixTypeJobFilter $(helixType)

  # This outputs any failed test to the build log. It is not required, but it makes it easier to see at a glance what failed.
  - task: powershell@2
    displayName: 'OutputTestResults.ps1'
    condition: succeededOrFailed()
    timeoutInMinutes: 15
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      targetType: filePath
      filePath: $(winUIHelixPipelineScripts)\OutputTestResults.ps1
      arguments: -HelixTypeJobFilter $(helixType)

  # This downloads files from Helix so that they can be published as a Pipeline artifact. This makes debugging test failures a lot easier since the
  # full logs and any supporting files can be downloaded from the Pipeline.
  - task: powershell@2
    displayName: 'ProcessHelixFiles.ps1'
    condition: succeededOrFailed()
    timeoutInMinutes: 15
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      targetType: filePath
      filePath: $(winUIHelixPipelineScripts)\ProcessHelixFiles.ps1
      # Remove -ProcessAllJobs to only download the files from work items with failing tests
      arguments: -OutputFolder '$(helixTestOutputDir)' -ProcessAllJobs -HelixTypeJobFilter $(helixType)
      errorActionPreference: continue
      failOnStderr: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Helix files'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(helixTestOutputBaseDir)
      artifactName: HelixTestOutput_$(buildPlatform)_$(buildConfiguration)

  - task: powershell@2
    displayName: 'Remove test certificate for MSIX test packages (DevCheck)'
    inputs:
      targetType: filePath
      filePath: DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -RemoveTestCert -RemoveTestPfx
      workingDirectory: '$(Build.SourcesDirectory)'
